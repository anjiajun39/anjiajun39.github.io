<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>查看操作系统类型大小</title>
    <link href="/posts/68d86f1e.html"/>
    <url>/posts/68d86f1e.html</url>
    
    <content type="html"><![CDATA[<p>使用C语言查看当前系统的指定类型的大小<br><a id="more"></a></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">/*typesize.c --  打印类型大小 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Type int has a size of %zd bytes.\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Type char has a size of %zd bytes.\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Type long has a size of %zd bytes.\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Type long long has a size of %zd bytes.\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Type double has a size of %zd bytes.\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Type long double has a size of %zd bytes.\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>C</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu搭建shadowsocks</title>
    <link href="/posts/1c66cb73.html"/>
    <url>/posts/1c66cb73.html</url>
    
    <content type="html"><![CDATA[<p>校园网流量不够用，发现走v6流量不计费，于是搭了一个服务器使上网流量走v6 to v4，将搭建过程记录下来。</p><a id="more"></a><h2 id="购买服务器"><a href="#购买服务器" class="headerlink" title="购买服务器"></a>购买服务器</h2><p>找一个能开ipv6的厂家，我选择的vultr，就是有点小贵。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>我这里选择的使ubuntu18.04</p><h3 id="安装pip"><a href="#安装pip" class="headerlink" title="安装pip"></a>安装pip</h3><pre class="language-shell" data-language="shell"><code class="language-shell">sudo apt install python3-pip</code></pre><h3 id="安装shadowsocks"><a href="#安装shadowsocks" class="headerlink" title="安装shadowsocks"></a>安装shadowsocks</h3><p>执行<br><pre class="language-shell" data-language="shell"><code class="language-shell">pip3 install https:&#x2F;&#x2F;github.com&#x2F;shadowsocks&#x2F;shadowsocks&#x2F;archive&#x2F;master.zip</code></pre></p><p>安装完后检查是否为3.0.0版本<br><pre class="language-shell" data-language="shell"><code class="language-shell">ssserver --version</code></pre></p><p>若显示Shadowsocks 3.0.0则进行下一步</p><h2 id="配置Shadowsocks"><a href="#配置Shadowsocks" class="headerlink" title="配置Shadowsocks"></a>配置Shadowsocks</h2><h3 id="创建shadowsocks-json"><a href="#创建shadowsocks-json" class="headerlink" title="创建shadowsocks.json"></a>创建shadowsocks.json</h3><pre class="language-shell" data-language="shell"><code class="language-shell">sudo vim &#x2F;etc&#x2F;shadowsocks.json</code></pre><h3 id="编辑内容"><a href="#编辑内容" class="headerlink" title="编辑内容"></a>编辑内容</h3><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"server"</span><span class="token operator">:</span><span class="token string">"::"</span><span class="token punctuation">,</span>  <span class="token comment">//这里开启了ipv6</span>    <span class="token property">"server_port"</span><span class="token operator">:</span>你的端口号<span class="token punctuation">,</span>    <span class="token property">"local_address"</span><span class="token operator">:</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span>    <span class="token property">"local_port"</span><span class="token operator">:</span><span class="token number">1080</span><span class="token punctuation">,</span>    <span class="token property">"password"</span><span class="token operator">:</span><span class="token string">"连接密码"</span><span class="token punctuation">,</span>    <span class="token property">"timeout"</span><span class="token operator">:</span><span class="token number">600</span><span class="token punctuation">,</span>    <span class="token property">"method"</span><span class="token operator">:</span><span class="token string">"chacha-ietf-poly1305"</span><span class="token punctuation">,</span>    <span class="token property">"fast_open"</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"prefer_ipv6"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span></code></pre><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><pre class="language-shell" data-language="shell"><code class="language-shell">ssserver -c &#x2F;etc&#x2F;shadowsocks.json -d start</code></pre><h2 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h2><p>如果要使用 salsa20 或 chacha20 或 chacha20-ietf 算法，需要安装 libsodium ，否则就算在config.json里面设置成chacha20也会提示method not supported.</p><p>依此执行以下命令安装libsodium</p><pre class="language-shell" data-language="shell"><code class="language-shell">apt-get install build-essentialwget https:&#x2F;&#x2F;github.com&#x2F;jedisct1&#x2F;libsodium&#x2F;releases&#x2F;download&#x2F;1.0.11&#x2F;libsodium-1.0.11.tar.gztar xf libsodium-1.0.11.tar.gz &amp;&amp; cd libsodium-1.0.11.&#x2F;configure &amp;&amp; make -j2 &amp;&amp; make installldconfig</code></pre>]]></content>
    
    
    <categories>
      
      <category>网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Shadowsocks</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>matlab基础使用</title>
    <link href="/posts/66ca42c.html"/>
    <url>/posts/66ca42c.html</url>
    
    <content type="html"><![CDATA[<p>本文记录Matlab基础命令及使用</p><a id="more"></a><h2 id="MATLAB的通用命令"><a href="#MATLAB的通用命令" class="headerlink" title="MATLAB的通用命令"></a>MATLAB的通用命令</h2><h3 id="1-常用命令"><a href="#1-常用命令" class="headerlink" title="1.常用命令"></a>1.常用命令</h3><p><code>cd</code> 显示或改变当前工作文件夹<br><code>dir</code> 显示当前文件夹或指定目录下的文件<br><code>clc</code> 清除工作窗中的所有显示内容<br><code>load</code> 加载指定文件的变量<br><code>diary</code> 日志文件命令<br><code>!</code> 调用DOS 命令<br><code>home</code> 将光标移至命令行窗口的最左上角<br><code>clf</code> 清除图形窗口<br><code>type</code> 显示文件内容<br><code>clear</code> 清理内存变量<br><code>echo</code> 工作窗信息显示开关<br><code>disp</code> 显示变量或文字内容<br><code>exit</code> <code>quit</code> 退出MATLAB<br><code>pack</code> 收集内存碎片<br><code>hold</code> 图形保存开关<br><code>path</code> 显示搜索目录<br><code>save</code> 保存内存变量到指定文件</p><h3 id="2-输入内容的编辑"><a href="#2-输入内容的编辑" class="headerlink" title="2.输入内容的编辑"></a>2.输入内容的编辑</h3>]]></content>
    
    
    <categories>
      
      <category>Matlab</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Matlab</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在 Windows 10 中安装 WSL2 的 Linux 子系统</title>
    <link href="/posts/102c6e63.html"/>
    <url>/posts/102c6e63.html</url>
    
    <content type="html"><![CDATA[<p>本文介绍如何在 Windows 10 中安装 WSL2 的 Linux 子系统</p><a id="more"></a><h2 id="启用虚拟机"><a href="#启用虚拟机" class="headerlink" title="启用虚拟机"></a>启用虚拟机</h2><p>以管理员权限启动 PowerShell，然后输入以下命令启用虚拟机平台：<br><pre class="language-shell" data-language="shell"><code class="language-shell">Enable-WindowsOptionalFeature -Online -FeatureName VirtualMachinePlatform</code></pre></p><p>以管理员权限启动 PowerShell，然后输入以下命令启用 Linux 子系统功能：<br><pre class="language-shell" data-language="shell"><code class="language-shell">Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux</code></pre></p><p>在以上每一步命令执行完之后，PowerShell 中可能会提示你重新启动计算机。按“Y”可以重新启动。</p><h2 id="安装一个Linus发行版"><a href="#安装一个Linus发行版" class="headerlink" title="安装一个Linus发行版"></a>安装一个Linus发行版</h2><p>打开微软商店应用，在搜索框中输入“Linux”然后搜索，你可以看到搜索结果中有很多的 Linux 发行版可以选择。选择一个你喜欢的 Linux 发行版本然后安装：</p><p>需要注意，在商店中的安装并没有实际上完成 Linux 子系统的安装，你还需要运行一次已安装的 Linux 发行版以执行真正的安装操作。</p><h2 id="启用WSL2"><a href="#启用WSL2" class="headerlink" title="启用WSL2"></a>启用WSL2</h2><p>重要：<strong>你的操作系统版本必须至少大于或等于 Windows 10.0.18917 ！</strong></p><p>使用 wsl -l 可以列出当前系统上已经安装的 Linux 子系统名称。注意这里的 -l 是列表“list”的缩写，是字母 l 不是其他字符。</p><pre class="language-shell" data-language="shell"><code class="language-shell">wsl -l</code></pre><p>如果提示 wsl 不是内部或外部命令，说明你没有启用“适用于 Windows 的 Linux 子系统”，请先完成本文第一步。</p><p>如果提示没有发现任何已安装的 Linux，说明你没有安装 Linux 发行版，或者只是去商店下载了，没有运行它执行真正的安装，请先完成本文第二步。</p><p>使用<code>wsl --set-version &lt;Distro&gt; 2</code>命令可以设置一个 Linux 发行版的 WSL 版本。命令中 <code>&lt;Distro&gt;</code> 替换为你安装的 Linux 发型版本的名称，也就是前面通过 <code>wsl -l</code> 查询到的名称。</p><p>我安装了Ubuntu发行版</p><pre class="language-shell" data-language="shell"><code class="language-shell">wsl --set-version Ubuntu 2</code></pre><p>当然，使用以下命令可以在以后安装 Linux 的时候默认启用 WSL2：</p><pre class="language-shell" data-language="shell"><code class="language-shell">wsl --set-default-version 2</code></pre>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何使用Git</title>
    <link href="/posts/ab8e450c.html"/>
    <url>/posts/ab8e450c.html</url>
    
    <content type="html"><![CDATA[<p>本文记录本人学习Git相关操作</p><a id="more"></a><p>教程来源于<a href="https://oschina.gitee.io/learn-git-branching/">https://oschina.gitee.io/learn-git-branching/</a><br>想学习git基本命令的小伙伴可以去找个网站，有图形树便于理解。</p><h3 id="提交记录"><a href="#提交记录" class="headerlink" title="提交记录"></a>提交记录</h3><pre class="language-shell" data-language="shell"><code class="language-shell">git commit</code></pre><h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><pre class="language-shell" data-language="shell"><code class="language-shell">git branch &lt;分支名&gt;</code></pre><h3 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h3><pre class="language-shell" data-language="shell"><code class="language-shell">git checkout &lt;分支名&gt;</code></pre><p>可使用以下命令直接<strong>创建并切换</strong>分支<br><pre class="language-shell" data-language="shell"><code class="language-shell">git checkout -b &lt;分支名&gt;</code></pre></p><h3 id="分支合并"><a href="#分支合并" class="headerlink" title="分支合并"></a>分支合并</h3><p>该命令使&lt;分支名&gt;合并至当前所在分支<br><pre class="language-shell" data-language="shell"><code class="language-shell">git merge &lt;分支名&gt;</code></pre><br>例如将master分支合并到bugfix<br><pre class="language-shell" data-language="shell"><code class="language-shell">git checkout bugfixgit merge master</code></pre></p><h3 id="Git-rebase"><a href="#Git-rebase" class="headerlink" title="Git rebase"></a>Git rebase</h3><p>该命令把&lt;分支名&gt;直接移至当前分支<br>假设当前在bugfix分支<br><pre class="language-shell" data-language="shell"><code class="language-shell">git rebase master</code></pre><br>这时master分支还没有更新，我们再切换回master分支，把它rebase到bugfix分支上<br><pre class="language-shell" data-language="shell"><code class="language-shell">git rebase bugfix</code></pre></p><h3 id="在提交树上移动-分离head"><a href="#在提交树上移动-分离head" class="headerlink" title="在提交树上移动,分离head"></a>在提交树上移动,分离head</h3><p>该命令使head指向cx分支，可使用哈希值<br><pre class="language-shell" data-language="shell"><code class="language-shell">git checkout cx</code></pre></p><h3 id="相对引用"><a href="#相对引用" class="headerlink" title="相对引用"></a>相对引用</h3><p>首先看看操作符 (^)。把这个符号加在引用名称的后面，表示让 Git 寻找指定提交记录的父提交。<br>所以 ‘master^’ 相当于“’master’的父节点”。<br>‘master^^’是’master’的第二个父节点<br>现在咱们切换到’master’的父节点<br><pre class="language-shell" data-language="shell"><code class="language-shell">git checkout master^</code></pre></p><h3 id="“-”操作符"><a href="#“-”操作符" class="headerlink" title="“~”操作符"></a>“~”操作符</h3><p>如果你想在提交树中向上移动很多步的话，敲那么多 ^ 貌似也挺烦人的，Git 当然也考虑到了这一点，于是又引入了操作符 ~。<br>该操作符后面可以跟一个数字（可选，不跟数字时与 ^ 相同，向上移动一次），指定向上移动多少次。<br>使用’~’一次后退四步<br><pre class="language-shell" data-language="shell"><code class="language-shell">git checkout HEAD~4</code></pre><br><strong>强制修改分支位置</strong><br>直接使用 -f 选项让分支指向另一个提交。例如:<br><pre class="language-shell" data-language="shell"><code class="language-shell">git branch -f master HEAD~3</code></pre><br>上面的命令会将 master 分支强制指向 HEAD 的第 3 级父提交。</p><h3 id="撤销变更"><a href="#撤销变更" class="headerlink" title="撤销变更"></a>撤销变更</h3><p><strong>Git Reset</strong><br>git reset 通过把分支记录回退几个提交记录来实现撤销改动。你可以将这想象成“改写历史”。git reset 向上移动分支，原来指向的提交记录就跟从来没有提交过一样。<br><pre class="language-shell" data-language="shell"><code class="language-shell">git reset HEAD~1</code></pre><br>Git 把 master 分支移回到 C1；现在我们的本地代码库根本就不知道有 C2 这个提交了。<br>（注：在reset后， C2 所做的变更还在，但是处于未加入暂存区状态。）</p><p><strong>Git Revert</strong><br>虽然在你的本地分支中使用 git reset 很方便，但是这种“改写历史”的方法对大家一起使用的远程分支是无效的哦！<br>为了撤销更改并分享给别人，我们需要使用 git revert<br><pre class="language-shell" data-language="shell"><code class="language-shell">git revert HEAD</code></pre><br>本质上这是新提交记录了 C2’ 引入了更改 —— 这些更改刚好是用来撤销 C2 这个提交的。也就是说 C2’ 的状态与 C1 是相同的。<br>revert 之后就可以把你的更改推送到远程仓库与别人分享啦。</p><h3 id="Git-Cherry-pick"><a href="#Git-Cherry-pick" class="headerlink" title="Git  Cherry-pick"></a>Git  Cherry-pick</h3><pre class="language-shell" data-language="shell"><code class="language-shell">git cherry-pick c2 c4</code></pre><h3 id="交互式的rebase"><a href="#交互式的rebase" class="headerlink" title="交互式的rebase"></a>交互式的rebase</h3><p>交互式 rebase 指的是使用带参数 <code>--interactive</code> 的 rebase 命令, 简写为 <code>-i</code></p><p>如果你在命令后增加了这个选项, Git 会打开一个 UI 界面并列出将要被复制到目标分支的备选提交记录，它还会显示每个提交记录的哈希值和提交说明，提交说明有助于你理解这个提交进行了哪些更改。</p><p>当 rebase UI界面打开时, 你能做3件事:</p><ul><li>调整提交记录的顺序（通过鼠标拖放来完成）</li><li>删除你不想要的提交（通过切换 <code>pick</code> 的状态来完成，关闭就意味着你不想要这个提交记录）</li><li>合并提交。 遗憾的是由于某种逻辑的原因，我们的课程不支持此功能，因此我不会详细介绍这个操作。简而言之，它允许你把多个提交记录合并成一个。</li></ul><pre class="language-shell" data-language="shell"><code class="language-shell">git rebase -i HEAD~4</code></pre><h3 id="本地栈式提交"><a href="#本地栈式提交" class="headerlink" title="本地栈式提交"></a>本地栈式提交</h3><p>来看一个在开发中经常会遇到的情况：我正在解决某个特别棘手的 Bug，为了便于调试而在代码中添加了一些调试命令并向控制台打印了一些信息。</p><p>这些调试和打印语句都在它们各自的提交记录里。最后我终于找到了造成这个 Bug 的根本原因，解决掉以后觉得沾沾自喜！</p><p>最后就差把 <code>bugFix</code> 分支里的工作合并回 <code>master</code> 分支了。你可以选择通过 fast-forward 快速合并到 <code>master</code> 分支上，但这样的话 <code>master</code> 分支就会包含我这些调试语句了。你肯定不想这样，应该还有更好的方式……</p><p>实际我们只要让 Git 复制解决问题的那一个提交记录就可以了。跟之前我们在“整理提交记录”中学到的一样，我们可以使用</p><ul><li><code>git rebase -i</code></li><li><code>git cherry-pick</code></li></ul><p>来达到目的。</p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo-abbrlink生成唯一永久文章链接</title>
    <link href="/posts/553fb3c9.html"/>
    <url>/posts/553fb3c9.html</url>
    
    <content type="html"><![CDATA[<p>Hexo在打开文章之后，不少中文内容在地址栏会显示为乱码，为了使得网址美观，找到了这个插件，可以生成一段特征码使简洁。<br><a id="more"></a></p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><pre class="language-js" data-language="js"><code class="language-js">npm install hexo<span class="token operator">-</span>abbrlink <span class="token operator">--</span>save</code></pre><blockquote><p>执行此命令可能会不成功，提示你缺少相应的依赖<br> 比如<code>babel-eslint</code>、<code>mini-css-extract-plugin</code>、<code>webpack-cli</code>…<br> 使用npm命令安装即可，比如<code>npm install eslint@4.x babel-eslint@8 --save-dev</code></p></blockquote><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>修改根目录站点配置文件<code>config.yml</code>，改为：</p><pre class="language-js" data-language="js"><code class="language-js">permalink<span class="token operator">:</span> posts<span class="token operator">/</span><span class="token operator">:</span>abbrlink<span class="token punctuation">.</span>html  # 此处可以自己设置，也可以直接使用 <span class="token operator">:</span><span class="token operator">/</span>abbrlinkabbrlink<span class="token operator">:</span>    alg<span class="token operator">:</span> crc32   #算法： <span class="token function">crc16</span><span class="token punctuation">(</span><span class="token keyword">default</span><span class="token punctuation">)</span> and crc32    rep<span class="token operator">:</span> hex     #进制： <span class="token function">dec</span><span class="token punctuation">(</span><span class="token keyword">default</span><span class="token punctuation">)</span> and hex</code></pre><p>生成完后，原<code>md</code>文件的Front-matter 内会增加<code>abbrlink</code> 字段，值为生成的ID 。这个字段确保了在我们修改了Front-matter 内的博客标题title或创建日期date字段之后而不会改变链接地址。</p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown 常用数学符号</title>
    <link href="/posts/c0a84437.html"/>
    <url>/posts/c0a84437.html</url>
    
    <content type="html"><![CDATA[<p>MarkDown常用数学符号<br><a id="more"></a></p><h1 id="MarkDown常用数学符号"><a href="#MarkDown常用数学符号" class="headerlink" title="MarkDown常用数学符号"></a>MarkDown常用数学符号</h1><h3 id="显示效果"><a href="#显示效果" class="headerlink" title="显示效果"></a>显示效果</h3><p>语法：$ 数学符号必须加在里面$</p><blockquote><p>$ 数学符号必须加在里面 $</p></blockquote><h3 id="上标"><a href="#上标" class="headerlink" title="上标"></a>上标</h3><p>语法：<br>$x^2$</p><blockquote><p>$x^2$</p></blockquote><h3 id="包括整体"><a href="#包括整体" class="headerlink" title="包括整体"></a>包括整体</h3><p>语法：<br>{y^x}</p><blockquote><p>$Z^{yx}$</p></blockquote><h3 id="大括号"><a href="#大括号" class="headerlink" title="大括号"></a>大括号</h3><p>语法：<br>\left 或者 \right</p><blockquote><p>$ \left(大括号)\right. $</p></blockquote><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>语法：<br>frac{ x }{ y }</p><blockquote><p>$ \frac{ x }{ y } $</p></blockquote><h3 id="开方"><a href="#开方" class="headerlink" title="开方"></a>开方</h3><p>语法：<br>\sqrt{ x }</p><blockquote><p>$\sqrt{ x }$<br>\sqrt[ n ]{ x }<br>$\sqrt[ 3 ]{ x }$</p></blockquote><h3 id="省略号"><a href="#省略号" class="headerlink" title="省略号"></a>省略号</h3><p>语法：<br>\ldots表示与文本底线对齐的省略号，\cdots表示与文本中线对齐的省略号</p><blockquote><p>$\ldots \cdots$</p></blockquote><h3 id="矢量"><a href="#矢量" class="headerlink" title="矢量"></a>矢量</h3><p>语法：<br>\vec{ a }</p><blockquote><p>$\vec{ a }$</p></blockquote><h3 id="积分"><a href="#积分" class="headerlink" title="积分"></a>积分</h3><p>语法：<br>\int_0^2 x^2 {\rm d}x</p><blockquote><p>$\int_0^2 x^2 {\rm d}x$</p></blockquote><h3 id="极限"><a href="#极限" class="headerlink" title="极限"></a>极限</h3><p>语法：<br>\lim\limits_{n \rightarrow +\infty} \frac{1}{n(n+1)}</p><blockquote><p>$\lim\limits_{n \rightarrow +\infty} \frac{1}{n(n+1)}$</p></blockquote><h3 id="累加"><a href="#累加" class="headerlink" title="累加"></a>累加</h3><p>语法：<br>\sum_{i=0}^n \frac{1}{i^2}</p><blockquote><p>$\sum_{i=0}^n \frac{1}{i^2}$</p></blockquote><h3 id="累乘"><a href="#累乘" class="headerlink" title="累乘"></a>累乘</h3><p>语法：<br>\prod_{i=0}^n \frac{1}{i^2}</p><blockquote><p>$\prod_{i=0}^n \frac{1}{i^2}$</p></blockquote><h3 id="希腊字母"><a href="#希腊字母" class="headerlink" title="希腊字母"></a>希腊字母</h3><div class="table-container"><table><thead><tr><th>名称</th><th>大写</th><th>写法</th><th>小写</th><th>写法</th></tr></thead><tbody><tr><td>alpha</td><td>A</td><td>A</td><td>α</td><td>\alpha</td></tr><tr><td>beta</td><td>B</td><td>B</td><td>β</td><td>\beat</td></tr><tr><td>gamma</td><td>Γ</td><td>\Gamma</td><td>γ</td><td>\gamma</td></tr><tr><td>delta</td><td>Δ</td><td>\Delta</td><td>δ</td><td>\delta</td></tr><tr><td>epsilon</td><td>E</td><td>E</td><td>ϵ</td><td>\epsilon</td></tr><tr><td>zeta</td><td>Z</td><td>Z</td><td>ζ</td><td>\zeta</td></tr><tr><td>eta</td><td>H</td><td>H</td><td>η</td><td>\eta</td></tr><tr><td>theta</td><td>Θ</td><td>\Theta</td><td>θ</td><td>\theta</td></tr><tr><td>iota</td><td>I</td><td>I</td><td>ι</td><td>\iota</td></tr><tr><td>kappa</td><td>K</td><td>K</td><td>κ</td><td>\kappa</td></tr><tr><td>lambda</td><td>Λ</td><td>\Lambda</td><td>λ</td><td>\lambda</td></tr><tr><td>mu</td><td>M</td><td>M</td><td>μ</td><td>\mu</td></tr><tr><td>nu</td><td>N</td><td>N</td><td>ν</td><td>\nu</td></tr><tr><td>xi</td><td>Ξ</td><td>\Xi</td><td>ξ</td><td>\xi</td></tr><tr><td>omicron</td><td>O</td><td>O</td><td>ο</td><td>\omicron</td></tr><tr><td>pi</td><td>Π</td><td>\Pi</td><td>π</td><td>\pi</td></tr><tr><td>rho</td><td>P</td><td>P</td><td>ρ</td><td>\rho</td></tr><tr><td>sigma</td><td>Σ</td><td>\Sigma</td><td>σ</td><td>\sigma</td></tr><tr><td>tau</td><td>T</td><td>T</td><td>τ</td><td>\tau</td></tr><tr><td>upsilon</td><td>Υ</td><td>\Upsilon</td><td>υ</td><td>\upsilon</td></tr><tr><td>phi</td><td>Φ</td><td>\Phi</td><td>ϕ</td><td>\phi</td></tr><tr><td>chi</td><td>X</td><td>X</td><td>χ</td><td>\chi</td></tr><tr><td>psi</td><td>Ψ</td><td>\Psi</td><td>ψ</td><td>\psi</td></tr><tr><td>omega</td><td>Ω</td><td>\Omega</td><td>ω</td><td>\omega</td></tr></tbody></table></div><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><p>±：\pm<br>×：\times<br>÷：\div<br>∣：\mid<br>∤：\nmid<br>⋅：\cdot<br>∘：\circ<br>∗：\ast<br>⨀：\bigodot<br>⨂：\bigotimes<br>⨁：\bigoplus<br>≤：\leq<br>≥：\geq<br>≠：\neq<br>≈：\approx<br>≡：\equiv<br>∑：\sum<br>∏：\prod<br>∐：\coprod</p><h3 id="集合运算符"><a href="#集合运算符" class="headerlink" title="集合运算符"></a>集合运算符</h3><p>∅：\emptyset<br>∈：\in<br>∉：\notin<br>⊂：\subset<br>⊃：\supset<br>⊆：\subseteq<br>⊇：\supseteq<br>⋂：\bigcap<br>⋃：\bigcup<br>⋁：\bigvee<br>⋀：\bigwedge<br>⨄：\biguplus<br>⨆：\bigsqcup</p><h3 id="对数运算符"><a href="#对数运算符" class="headerlink" title="对数运算符"></a>对数运算符</h3><p>$\log$:log：\log<br>lg：\lg<br>ln：\ln</p><h3 id="三角运算符"><a href="#三角运算符" class="headerlink" title="三角运算符"></a>三角运算符</h3><p>⊥：\bot<br>∠：\angle<br>30∘：30^\circ<br>sin：\sin<br>cos：\cos<br>tan：\tan<br>cot：\cot<br>sec：\sec<br>csc：\csc</p><h3 id="微积分运算符"><a href="#微积分运算符" class="headerlink" title="微积分运算符"></a>微积分运算符</h3><p>′：\prime<br>∫：\int<br>∬：\iint<br>∭：\iiint<br>⨌：\iiiint<br>∮：\oint<br>lim：\lim<br>∞：\infty<br>∇：\nabla</p><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>∵：\because<br>∴：\therefore<br>∀：\forall<br>∃：\exists<br>≠：\not=<br>≯：\not&gt;<br>⊄：\not\subset</p><h3 id="戴帽符号"><a href="#戴帽符号" class="headerlink" title="戴帽符号"></a>戴帽符号</h3><p>$\hat{y}:$\hat{y}<br>$\check{y}:$\check{y}<br>$\breve{y}$:\breve{y}</p><h3 id="连线符号"><a href="#连线符号" class="headerlink" title="连线符号"></a>连线符号</h3><p>$\overline{a+b+c+d}$:                 \overline{a+b+c+d}<br>$\underline{a+b+c+d}$:                 \underline{a+b+c+d}</p><h3 id="箭头符号"><a href="#箭头符号" class="headerlink" title="箭头符号"></a>箭头符号</h3><p>↑：\uparrow<br>↓：\downarrow<br>⇑：\Uparrow<br>⇓：\Downarrow<br>→：\rightarrow<br>←：\leftarrow<br>⇒：\Rightarrow<br>⇐：\Leftarrow<br>⟶：\longrightarrow<br>⟵：\longleftarrow<br>⟹：\Longrightarrow<br>⟸：\Longleftarrow</p><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><div class="table-container"><table><thead><tr><th>效果</th><th>语法</th></tr></thead><tbody><tr><td><font face="黑体">我是黑体字</font></td><td>\<font face="黑体">我是黑体字\</font></td></tr><tr><td><font face="微软雅黑">我是微软雅黑</font></td><td>\<font face="微软雅黑">我是微软雅黑\</font></td></tr><tr><td><font face="STCAIYUN">我是华文彩云</font></td><td>\<font face="STCAIYUN">我是华文彩云\</font></td></tr><tr><td><font color=red>我是红色</font></td><td>\<font color=red>我是红色\</font></td></tr><tr><td><font color=#008000>我是绿色</font></td><td>\<font color=#008000>我是绿色\</font></td></tr><tr><td><font color=Blue>我是蓝色</font></td><td>\<font color=Blue>我是蓝色\</font></td></tr><tr><td><font size=5>我是尺寸</font></td><td>\<font size=5>我是尺寸\</font></td></tr><tr><td><font face="黑体" color=green size=5>我是黑体，绿色，尺寸为5</font></td><td>\<font face="黑体" color=green size=5>我是黑体，绿色，尺寸为5\</font></td></tr></tbody></table></div><h3 id="居中"><a href="#居中" class="headerlink" title="居中"></a>居中</h3><p>居中语法：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span> 串口通信程序<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span></code></pre><p>居中效果：</p><center> 串口通信程序<br><br></center>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Hexo + GitHub Pages 搭建博客</title>
    <link href="/posts/22982.html"/>
    <url>/posts/22982.html</url>
    
    <content type="html"><![CDATA[<p>本文记录并分享如何使用Hexo + GitHub Pages 搭建博客<br><a id="more"></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在博客搭建的过程中我遇到了不少问题，参照网上各种教程，搭建好了这个博客，现在将过程完整记录下来，希望对你有所帮助。<strong>本文在windows基础上搭建博客</strong></p><p>博客的建立不是为了标新立异，而是为了有一个记录思想的过程，回过头来看看从中收获了什么。</p><h2 id="搭建Node-js环境"><a href="#搭建Node-js环境" class="headerlink" title="搭建Node.js环境"></a>搭建Node.js环境</h2><blockquote><p>为什么要搭建Node.js环境？ ——因为Hexo博客系统是基于Node.js编写的 。</p></blockquote><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境，可以在非浏览器环境下，解释运行 JS 代码。</p><p>在 <strong>Node.js官网</strong>：[<a href="https://nodejs.org/en/">https://nodejs.org/en/</a>] 下载安装包，推荐使用稳定版本。</p><p>安装过程一路保持默认，很快就会结束。</p><p>打开<strong>命令提示符</strong>，输入<code>node -v</code>、<code>npm -v</code>,出现版本号表示配置成功。</p><p><img src="https://s1.ax1x.com/2020/08/19/d1QRw4.png" srcset="/img/loading.gif" alt=""></p><h2 id="搭建Git环境"><a href="#搭建Git环境" class="headerlink" title="搭建Git环境"></a>搭建Git环境</h2><blockquote><p>为什么要搭建Git环境， ——因为需要把本地的网页和文章等提交到GitHub上。</p></blockquote><p>Git 是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</p><p>在 <strong>Git官网</strong>：<a href="https://git-scm.com/">https://git-scm.com/</a> 下载安装包，进行安装。</p><p>安装完成后，桌面右键，打开<code>Git Bash Here</code>，输入<code>git --version</code>，出现版本号表示Git配置成功。</p><p><img src="https://s1.ax1x.com/2020/08/19/d13jk4.jpg" srcset="/img/loading.gif" alt=""></p><h2 id="GitHub注册和配置"><a href="#GitHub注册和配置" class="headerlink" title="GitHub注册和配置"></a>GitHub注册和配置</h2><p>GitHub 是一个代码托管平台，因为只支持 Git 作为唯一的版本库格式进行托管，故名 GitHub。</p><p><strong>Github注册</strong>：<a href="https://github.com/">https://github.com/</a></p><p><img src="https://s1.ax1x.com/2020/08/19/d104SS.png" srcset="/img/loading.gif" alt=""></p><p><strong>创建仓库</strong>：Repository name 要使用自己的用户名，仓库名规则：</p><p><strong>注意</strong><code>yourname</code>必须是你的用户名<br>    yourname/yourname.github.io</p><p><img src="https://s1.ax1x.com/2020/08/19/d1DQu4.png" srcset="/img/loading.gif" alt=""></p><p>(这里我的仓库已经创建，所以报错)</p><p>之后访问 yourname.github.io，如果可以正常访问，那么 Github 的配置已经结束了。</p><p>到此搭建 Hexo 博客的相关环境配置已经完成，下面开始讲解 Hexo 的相关操作。</p><h2 id="安装配置Hexo"><a href="#安装配置Hexo" class="headerlink" title="安装配置Hexo"></a>安装配置Hexo</h2><p>Hexo 是一个快速、简洁且高效的博客框架，使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><p>强烈建议你花20分钟区读一读 Hexo 的官方文档：<a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></p><p><img src="https://s1.ax1x.com/2020/08/19/d1yXM8.png" srcset="/img/loading.gif" alt=""></p><p><strong>使用npm安装Hexo</strong>：在命令行输入：<br><pre class="language-none"><code class="language-none">npm install hexo-cli -g</code></pre></p><p>安装完成后，查看Hexo的版本：<br><pre class="language-none"><code class="language-none">hexo version</code></pre><br>若能正常看到版本号，之后执行下列命令来初始化 Hexo，用户名改成你的，Hexo 将会在指定文件夹中新建所需要的文件。<br><pre class="language-none"><code class="language-none">---hexo init anjiajun39.github.io cd anjiajun39.github.io npm install---</code></pre></p><p>新建完成后，指定文件夹的目录如下：</p><pre><code>├── .deploy         #需要部署的文件├── node_modules    #Hexo插件├── public          #生成的静态网页文件├── scaffolds       #模板├── source          #博客正文和其他源文件，404、favicon、CNAME 都应该放在这里| ├── _drafts       #草稿| └── _posts        #文章├── themes          #主题├── _config.yml     #全局配置文件└── package.json    #npm 依赖等</code></pre><p><strong>运行本地Hexo服务</strong><br><pre class="language-none"><code class="language-none">hexo server或者hexo s</code></pre></p><p>您的网站会在 <a href="http://localhost:4000/">http://localhost:4000/</a> 下启动。如果可以正常访问，则说明Hexo本地博客已经搭建起来了，只是本地哦，别人看不到的。下面，我们要部署到Github。</p><p><img src="https://s1.ax1x.com/2020/08/19/d3FLE6.png" srcset="/img/loading.gif" alt=""></p><p><strong>注意1</strong>：执行hexo server提示找不到该指令</p><p>解决办法：在Hexo 3.0 后server被单独出来了，需要安装server，安装的命令如下：<br><pre class="language-none"><code class="language-none">sudo npm install hexo-server或者npm install hexo -server --save</code></pre></p><h2 id="关联Hexo与GitHub-Pages"><a href="#关联Hexo与GitHub-Pages" class="headerlink" title="关联Hexo与GitHub Pages"></a>关联Hexo与GitHub Pages</h2><p>我们如何让本地git项目与远程的github建立联系呢？用 SSH keys</p><p><strong>生成SSH keys</strong></p><p>输入你注册GitHub时的邮箱地址<br><pre class="language-none"><code class="language-none">ssh-keygen -t rsa -C &quot;youremail@xx.com&quot;</code></pre></p><p>在回车中会提示你输入一个密码，这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入，我们按回车不设置密码。</p><p><strong>添加 SSH Key 到 GitHub</strong></p><p>打开 <code>C:\Users\用户\.ssh\id_rsa.pub</code>，此文件里面内容为刚才生成的密钥，准确的复制这个文件的内容，粘贴到 <a href="https://github.com/settings/ssh">https://github.com/settings/ssh</a> 的 <code>new SSH key</code> 中</p><p><strong>测试</strong></p><p>可以输入下面的命令，看看设置是否成功，git@github.com 的部分不要修改：<br><pre class="language-none"><code class="language-none">ssh -T git@github.com</code></pre></p><p>如果是下面的反馈：<br><pre class="language-none"><code class="language-none">The authenticity of host &#39;github.com (207.97.227.239)&#39; can&#39;t be established.RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.Are you sure you want to continue connecting (yes&#x2F;no)?</code></pre></p><p>不要紧张，输入yes就好，然后会看到：</p><pre class="language-none"><code class="language-none">Hi Anjiajun! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code></pre><p><strong>配置Git个人信息</strong></p><p>现在你已经可以通过 SSH 链接到 GitHub 了，还有一些个人信息需要完善的。<br> Git 会根据用户的名字和邮箱来记录提交。GitHub 也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的。<br><pre class="language-none"><code class="language-none">git config --global user.name &quot;anjiajun39&quot;git config --global user.email &quot;anjiajun39@qq.com&quot;</code></pre></p><p><strong>配置 Deployment</strong></p><p>在根目录的<code>_config.yml</code>文件中，找到<code>Deployment</code>，然后按照如下修改，用户名改成你的：</p><p>需要注意的是：冒号后面记得空一格！</p><pre><code># Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:  type: git  repo: git@github.com:anjiajun39/anjiajun39.github.io.git  branch: master</code></pre><p><strong>本地文件提交到 GitHub Pages</strong><br><pre class="language-none"><code class="language-none">&#x2F;&#x2F; 删除旧的 public 文件hexo clean&#x2F;&#x2F; 生成新的 public 文件hexo generate或者hexo g&#x2F;&#x2F; 开始部署hexo deploye或者hexo d</code></pre></p><p>在浏览器中输入 <a href="https://anjiajun39.github.io">https://anjiajun39.github.io</a> （用户名改成你的）看到了 Hexo 与 GitHub Pages 已经成功关联了。</p><p><u><strong>注意1</strong></u>：若<code>hexo d</code>操作失败，则需要提前安装一个扩展：<br><pre class="language-none"><code class="language-none">npm install hexo-deployer-git --save</code></pre></p><p><u><strong>注意2</strong></u>：如果在执行 <code>hexo d</code> 后,出现 <code>error deployer not found:github</code> 的错误（如下），则是因为没有设置好 public key 所致，重新详细设置即可。<br><pre class="language-none"><code class="language-none">Permission denied (publickey).fatal: Could not read from remote repository.Please make sure you have the correct access rightsand the repository exists.</code></pre></p><p><u><strong>注意3</strong></u>：怎么避免 .md 文件被解析？</p><p>Hexo原理就是hexo在执行hexo generate时会在本地先把博客生成的一套静态站点放到public文件夹中，在执行hexo deploy时将其复制到.deploy文件夹中。Github的版本库通常建议同时附上README.md说明文件，但是hexo默认情况下会把所有md文件解析成html文件，所以即使你在线生成了 README. md，它也会在你下一次部署时被删去。怎么解决呢？</p><p>在执行hexo deploy前把在本地写好的README.md文件复制到.deploy文件夹中，再去执行hexo deploy。</p><h2 id="GitHub-Pages地址解析到个人域名"><a href="#GitHub-Pages地址解析到个人域名" class="headerlink" title="GitHub Pages地址解析到个人域名"></a>GitHub Pages地址解析到个人域名</h2><blockquote><p>Github Pages 是面向用户、组织和项目开放的公共静态页面搭建托管服 务，站点可以被免费托管在 Github 上，你可以选择使用 Github Pages 默 认提供的域名 github.io 或者自定义域名来发布站点。</p></blockquote><p>进行该绑定过程，其实就是一个重定向的过程。</p><p>在 GitHub 仓库的根目录下建立一个 <code>CNAME</code> 的文本文件(注意：没有扩展名)，文件里面只能输入一个你的域名，不能加<code>http://</code></p><pre class="language-none"><code class="language-none">www.anjiajun.cn</code></pre><p>注意：CNAME 一定是在你 Github 项目的 master 根目录下</p><p>进入<a href="https://dc.aliyun.com/tcparse/dns.htm">阿里云域名解析地址</a>，添加解析：</p><ol><li>记录类型选择<code>CNAME</code></li><li>主机记录填<code>www</code></li><li>解析线路选择<code>默认</code></li><li>记录值填<code>yourname.github.io</code></li><li>TTL值为<code>10</code>分钟</li><li>再添加一个解析，记录类型<code>A</code></li><li>主机记录填<code>www</code></li><li>解析线路选择<code>默认</code></li><li>记录值填你GitHub 的ip地址（在cmd中ping：）</li></ol><p>点击保存，等 1 分钟，访问下你自己的域名，一切就ok了。</p><p><strong>注意</strong>：CNAME文件在下次 <code>hexo deploy</code>的时候就消失了，需要重新创建，这样就很繁琐</p><p>方法一：每次 <code>hexo d</code> 之后，就去 GitHub 仓库根目录新建 CNAME文件</p><p>方法二：在 <code>hexo g</code> 之后， <code>hexo d</code> 之前，把CNAME文件复制到 “\public” 目录下面，里面写入你要绑定的域名。</p><p>方法三（推荐）：将需要上传至github的内容放在source文件夹，例如CNAME、favicon.ico、images等，这样在 hexo d 之后就不会被删除了。</p><h2 id="Hexo常用操作"><a href="#Hexo常用操作" class="headerlink" title="Hexo常用操作"></a>Hexo常用操作</h2><h3 id="发表一篇文章"><a href="#发表一篇文章" class="headerlink" title="发表一篇文章"></a>发表一篇文章</h3><pre class="language-none"><code class="language-none">hexo new &quot;文章标题&quot;</code></pre><p>在本地博客文件夹 <code>source\_posts</code> 文件夹下看到我们新建的 markdown 文件。</p><p>当然，我们也可以手动添加Markdown文件在source-&gt;_deploy文件夹下，其效果同样可以媲美<code>hexo new</code></p><p>文章编辑好之后，运行生成、部署命令：<br><pre class="language-none"><code class="language-none">hexo cleanhexo ghexo d</code></pre></p><p>当然你也可以执行下面的命令，相当于上面两条命令的效果<br><pre class="language-none"><code class="language-none">hexo cleanhexo d -g</code></pre></p><h3 id="新建一个自定义页面"><a href="#新建一个自定义页面" class="headerlink" title="新建一个自定义页面"></a>新建一个自定义页面</h3><pre class="language-none"><code class="language-none">hexo new page folder</code></pre><h3 id="文章如何添加多个标签"><a href="#文章如何添加多个标签" class="headerlink" title="文章如何添加多个标签"></a>文章如何添加多个标签</h3><p>有两种多标签格式<br><pre class="language-none"><code class="language-none">tags: [a, b, c]或tags:- a- b- c</code></pre></p><h3 id="显示部分文章内容"><a href="#显示部分文章内容" class="headerlink" title="显示部分文章内容"></a>显示部分文章内容</h3><p>如果在博客文章列表中，不想全文显示，可以增加 ``, 后面的内容就不会显示在列表。</p><pre class="language-none"><code class="language-none">&lt;!--more--&gt;</code></pre><h2 id="更改主题"><a href="#更改主题" class="headerlink" title="更改主题"></a>更改主题</h2><p>官方主题库：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p><p>或在GitHub中下载主题文件夹，放置在博客的themes文件夹下，再把根目录的_config文件中的theme后主题名改为所需要修改的主题名。</p><p>具体操作详见主题文档。</p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>博客新开张</title>
    <link href="/posts/17851.html"/>
    <url>/posts/17851.html</url>
    
    <content type="html"><![CDATA[<p>好久没有打理博客了<br><a id="more"></a><br>经过疫情和高考等等繁琐的事情后，终于有时间重新打理博客了</p><h2 id="想说的话"><a href="#想说的话" class="headerlink" title="想说的话"></a>想说的话</h2><blockquote><p>人生最可悲的事情，莫过于胸怀大志，却又虚度光阴。觉得自己不够聪明，但干事总爱拖延；觉得自己学历不漂亮，可又没利用业余继续充电；对自己不满意，但自我安慰今天好好玩，明天再努力。既然知道路远，那就该早点出发。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/posts/4a17b156.html"/>
    <url>/posts/4a17b156.html</url>
    
    <content type="html"><![CDATA[<p>欢迎来到我的新博客<br><a id="more"></a></p><h2 id="大家好！"><a href="#大家好！" class="headerlink" title="大家好！"></a>大家好！</h2><p><strong>从今天起!</strong></p><p>我的Blog就搭建完成了，虽然过程非常简单<del><strong>(十分坎坷)</strong></del>，但还是锻炼自己<del><strong>(勉强建好)</strong></del>了，后续会继续进行优化。 </p><p>本Blog会记录个人的一些<strong>学习经验</strong>，<strong>生活体验</strong>，<strong>游玩感受</strong>，blablabla.</p><blockquote><p>&emsp;<strong>Never stop fighting for what you believing.&emsp;&emsp;&emsp;—Anna</strong></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
